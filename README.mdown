# CasServer

## Get it at 

[http://github.com/community/cas_server](http://github.com/community/cas_server "CasServer")

## Introduction

Simple implementation of a Cas Authentication Server. It does not depend on rails but only on active\_support and active\_record

cas\_server is not really designed to be used as a out of the box standalone server castronaut or rubycas-server are better for that. cas\_server purpose is to be the central authentication component of your own plateform, responding to your own business logic.

I personnaly use it for a multi application multidomain sass plateform with shared user, facebook authentication... Typical use would be a lighthouse/tenderapp with centralized user management and shared user base while each application maintaining its own specific user logic but without duplicating all authentication related logic and sharing user attributes (avatar, email, ...).

## Usage

### Packaging

cas\_server does not handle view rendering (login screen) and return a 404 in this case. This is particularly suitable for being embedded as a Rails Metal in Rails app that will handle user creation and plateform logic.

    #Rails metal adapter
    class Metal < Rails::Rack::Metal
      def self.call(env)
        CasServer::Rack::ActiveRecord.new(CasServer::Rack::Router.new).call(env)
      end
    end

    # Cas wrapper controller in the rails app
    class CasController < ApplicationController
      # 2.1. /login as credential requestor
      def credential_requestor
         #render login screen(s) view, you can have different screen if you have several authenticator, or a shared screen, or none if your authenticator is a pure sso (like facebook, cookie authentication, ...)
      end

      # 2.3. /logout
      def logout
        #render logout view
      end
    end
    
    # Cas route
    map.with_options :controller => 'cas' do |cas|
      cas.connect 'cas/login', :action => 'credential_requestor'
      cas.connect 'cas/logout', :action => 'logout'
      cas.connect 'cas/:attempt', :action => 'credential_requestor'
    end

Views as login screen is delegated to upper stack (rails metal i.e.)
Basic implementation only pass :username, :password to cas (login\_ticket is a cas spec token to ensure post are not replayed. This can be by passed if need be)

    <h2>Login</h2>
    <% form_tag '/cas/login', :method => :post do %>
        <fieldset>
            <%= hidden_field_tag :lt, login_ticket %>
            <%= hidden_field_tag :service, params[:service] %>
            <%= hidden_field_tag :auth, 'base' %>

            <%= text_field_tag :username, params[:username], :class => 'textInput' %>
            <%= password_field_tag :password, '', :class => 'textInput' %>

            <%= submit login %>
        </fieldset>
    <% end %>
    <p>
        <%= link_to('signup!', signup_url(:service => params[:service]))) %>
    </p>

### Authenticator
    
cas\_server has been designed to support any kind of authentication as an input (open\_id, facebook id, ...) and use authenticator to implement them.

The basic structure of an authenticator is:

    module Auth
      module Authenticator
        class Base < CasServer::Extension::Authenticator::Base
      
          #you have access here to service_manager
      
          def email
            params['username']
          end
      
          def password
            params['password']
          end
      
          def identity
            @identity ||= User.authenticate(email, password)
          end
      
          def authenticate?
            identity.present?
          end
      
          def extra_attributes
            identity.attributes.slice('id', 'firstname', 'lastname', 'email', 'avatar_url', 'about')
          end
      
          def uuid
            identity.id
          end
      
        end
      end
    end


### Service Manager

Another part of the design is the service manager, it is loaded when a service\_url is given and should be used for business specific logic (which authenticator is authorized for which service\_url), which service\_url is allowed ...

    module Auth
      module ServiceManager
        class Slashcommunity < CasServer::Extension::ServiceManager::Base
      
          def authenticator_enabled?(authenticator_model)
            #authenticator authorized on this service_url ?
            true
          end
      
          def authorized?(uuid)
            #uuid authorized on this domain ?
            true
          end
      
          def default_authenticator
            #what is the default authenticator i.e. without specific params
            :base
          end
      
          def extra_attributes_for(uuid)
            #add service_url specific attribute for a given uuid
            {}
          end

          def valid_service?
            #do it respond to this service_url or not ?
            true
          end
        end
      end
    end

## Share profile and not only authentication

cas\_server supports attributes sharing. When a service provider (your app that consume identities) request ServiceValidate after an authentication, you can provide the service provider with extra attributes.

Basic use of it is central profile management and not just central authentication management. Your central user base has more than just username/password, probably stuff like avatar url and emails. When the user authentify on cas server and is redirected to service provider, the service profider check the service ticket (by requesting serviceValidate).

Cas spec request the following response from cas server:

    <?xml version="1.0" encoding="UTF-8"?>
    <cas:serviceResponse xmlns:cas="http://www.yale.edu/tp/cas">
      <cas:authenticationSuccess>
        <cas:user>uuid</cas:user>
      </cas:authenticationSuccess>
    </cas:serviceResponse>
  
Cas server has an extra part in the response which is NOT in CAS 2.0 spec:

    <cas:serviceResponse xmlns:cas="http://www.yale.edu/tp/cas">
      <cas:authenticationSuccess>
        <cas:user>uuid</cas:user>
        <sc:profile xmlns:sc="http://slashcommunity.com/api/v1/profile">
          <email>email@domain.com</email>
          ...
        </sc:profile>
      </cas:authenticationSuccess>
    </cas:serviceResponse>

The format of this extra response is "standard" ActiveSupport hash xml serialization. Currently the xml namespace sc:profile xmlns:sc="http://slashcommunity.com/api/v1/profile" breaks rubycas-client but fixing it is easy.

With the service manager you can even add/remove specific attributes depending of the target service\_url (useful to manage application autorization or membership, ...)

This is particularly usefull when you implement authenticator like facebook or open id with attribute extension or even LDAP. It's your choice to give meaning to the different attributes as a role name if you want to centralize authorization.

## Remarks

### TODO

- There is no support for Proxy authentication right now
- There is no single sign out, when a user logout previous service ticket remains active, and local service session too. This is not really an issue with cas\_server as the design can handle it: ticket\_granting\_cookie (i.e. cas sso cookie) store theirs relations with service\_ticket it generates. The main issue with single sign out is on the app side, as application must store a relation between local session and validated service ticket which can be quite cucumbersome or impossible in case of default rails session cookie.

### FIXME

- There is a flow in SSO cookie, they never expires, which means that sessions will always be available.
We need to fix this

- It supports extended profile (on serviceValidate) but rubycas-client has an issue with the xml namespace (easy to fix). We use our own client to interact with CasServer (you can grab it at [http://github.com/community/cas_client](http://github.com/community/cas_client "CasClient")
but the rubycas-client slight incompatibility with extra attribute is easy to work around.


Copyright (c) 2009 Renaud Morvan, Dimelo
Licenced under MIT
